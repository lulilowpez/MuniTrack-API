// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(MuniDbContext))]
    [Migration("20250909163041_IncidenceData")]
    partial class IncidenceData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.19");

            modelBuilder.Entity("CitizenIncidence", b =>
                {
                    b.Property<int>("CitizenDNI")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IncidencesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CitizenDNI", "IncidencesId");

                    b.HasIndex("IncidencesId");

                    b.ToTable("CitizenIncidence");
                });

            modelBuilder.Entity("CitizenOperator", b =>
                {
                    b.Property<int>("CitizensDNI")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OperatorNLegajo")
                        .HasColumnType("INTEGER");

                    b.HasKey("CitizensDNI", "OperatorNLegajo");

                    b.HasIndex("OperatorNLegajo");

                    b.ToTable("CitizenOperator");
                });

            modelBuilder.Entity("Domain.Entities.Citizen", b =>
                {
                    b.Property<int>("DNI")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("DNI");

                    b.ToTable("Citizens");
                });

            modelBuilder.Entity("Domain.Entities.Incidence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Department")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("IncidenceType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Incidences");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2025, 9, 9, 16, 30, 40, 887, DateTimeKind.Utc).AddTicks(885),
                            Deleted = 0,
                            Department = 4,
                            Description = "Luz rota en Av. Pellegrini 2000",
                            IncidenceType = 1,
                            State = 0
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2025, 9, 7, 16, 30, 40, 887, DateTimeKind.Utc).AddTicks(887),
                            Deleted = 0,
                            Department = 1,
                            Description = "Bache en San Martín y Rioja",
                            IncidenceType = 2,
                            State = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.Operator", b =>
                {
                    b.Property<int>("NLegajo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DNI")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.HasKey("NLegajo");

                    b.ToTable("Operators");

                    b.HasData(
                        new
                        {
                            NLegajo = 459850,
                            DNI = 46502865,
                            Deleted = 0,
                            Email = "micaela@example.com",
                            LastName = "Ortigoza",
                            Name = "Micaela",
                            Password = "123abc",
                            Phone = "3416897542",
                            Position = 3
                        },
                        new
                        {
                            NLegajo = 459851,
                            DNI = 43567210,
                            Deleted = 0,
                            Email = "lucas@example.com",
                            LastName = "Fernandez",
                            Name = "Lucas",
                            Password = "abc12345",
                            Phone = "3416549871",
                            Position = 2
                        });
                });

            modelBuilder.Entity("IncidenceOperator", b =>
                {
                    b.Property<int>("IncidencesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OperatorNLegajo")
                        .HasColumnType("INTEGER");

                    b.HasKey("IncidencesId", "OperatorNLegajo");

                    b.HasIndex("OperatorNLegajo");

                    b.ToTable("IncidenceOperator");
                });

            modelBuilder.Entity("CitizenIncidence", b =>
                {
                    b.HasOne("Domain.Entities.Citizen", null)
                        .WithMany()
                        .HasForeignKey("CitizenDNI")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Incidence", null)
                        .WithMany()
                        .HasForeignKey("IncidencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CitizenOperator", b =>
                {
                    b.HasOne("Domain.Entities.Citizen", null)
                        .WithMany()
                        .HasForeignKey("CitizensDNI")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Operator", null)
                        .WithMany()
                        .HasForeignKey("OperatorNLegajo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IncidenceOperator", b =>
                {
                    b.HasOne("Domain.Entities.Incidence", null)
                        .WithMany()
                        .HasForeignKey("IncidencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Operator", null)
                        .WithMany()
                        .HasForeignKey("OperatorNLegajo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
